version: '2.1'

services:
  orchestrator:
    build: ./orchestrator
    image: orchestrator:latest
    command: python3 -u db.py
    container_name: orchestrator
    ports:
      - "80:80"
    volumes:
      - ./orchestrator:/orchestrator
    networks:
      - backend
    depends_on:
      rabbitmq:
        condition: service_healthy

  rabbitmq:
    build: ./rabbitmq
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:15672"]
      interval: 30s
      timeout: 10s
      retries: 5

  zookeeper:
    image: zookeeper:latest
    container_name: zookeeper
    hostname: zookeeper
    networks:
      - backend
    environment:
      - ZOO_MY_ID=1
      - ZOO_SERVERS=server.1=0.0.0.0:2888:3888;2181

  slave:
    build: ./worker
    image: slave:latest
    command: python3 -u worker.py
    container_name: slave
    volumes:
    - ./worker:/worker
    networks:
      - backend
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - WORKER_TYPE=slave
      - DB_HOSTNAME=mongoslave
      - NODE_NAME=slave1

  mongoslave:
    image: mongo:latest
    container_name: mongoslave
    networks:
      - backend

  master:
    build: ./worker
    image: master:latest
    command: python3 -u worker.py
    container_name: master
    volumes:
      - ./worker:/worker
    networks:
      - backend
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - WORKER_TYPE=master
      - DB_HOSTNAME=mongomaster
      - NODE_NAME=master

  mongomaster:
    image: mongo:latest
    container_name: mongomaster
    networks:
      - backend

networks:
  backend: