version: '2.1'

services:
  orchestrator:
    build: ./orchestrator
    image: orchestrator:latest
    command: python3 -u db.py
    container_name: orchestrator
    ports:
      - "80:80"
    volumes:
      - ./orchestrator:/orchestrator
    networks:
      - backend
    depends_on:
      rabbitmq:
        condition: service_healthy

  rabbitmq:
    build: ./rabbitmq
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:15672"]
      interval: 30s
      timeout: 10s
      retries: 5

  zookeeper:
    image: zookeeper:latest
    container_name: zookeeper
    networks:
      - backend

  slave:
    build: ./slave
    image: slave:latest
    command: python3 -u consume_reads.py
    container_name: slave
    volumes:
    - ./slave:/slave
    links:
      - mongoslave
    networks:
      - backend
    depends_on:
      rabbitmq:
        condition: service_healthy

  mongoslave:
    image: mongo:latest
    container_name: mongoslave

  master:
    build: ./master
    image: master:latest
    command: python3 -u consume_writes.py
    container_name: master
    volumes:
      - ./master:/master
    links:
      - mongomaster
    networks:
      - backend
    depends_on:
      rabbitmq:
        condition: service_healthy

  mongomaster:
    image: mongo:latest
    container_name: mongomaster

networks:
  backend: