version: '3'

services:
  orchestrator:
    build: ./orchestrator
    image: orchestrator:latest
    command: python3 -u db.py
    container_name: orchestrator
    ports:
      - "80:80"
    volumes:
      - ./orchestrator:/orchestrator
    networks:
      - backend
    entrypoint: ["python3", "zoo_watch.py"]
    depends_on:
      - rabbitmq
      - zookeeper

  rabbitmq:
    image: rabbitmq:latest
    networks:
      - backend
    container_name: rabbitmq
    hostname: rabbitmq

  zookeeper:
    image: zookeeper:latest
    container_name: zookeeper
    hostname: zookeeper
    networks:
      - backend
    environment:
      - ZOO_MY_ID=1
      - ZOO_SERVERS=server.1=0.0.0.0:2888:3888;2181

  slave1:
    build: ./worker
    image: slave:latest
    command: sh -c "sleep 20 && python3 -u worker.py"
    container_name: slave1
    volumes:
    - ./worker:/worker
    networks:
      - backend
    environment:
      - WORKER_TYPE=slave
      - DB_HOSTNAME=mongoslave1
      - NODE_NAME=slave1
    entrypoint: ["sh", "cleanup.sh"]
    depends_on:
      - rabbitmq
      - zookeeper

  mongoslave1:
    image: mongo:latest
    container_name: mongoslave1
    networks:
      - backend

  master:
    build: ./worker
    image: master:latest
    command: sh -c "sleep 20 && python3 -u worker.py"
    container_name: master
    volumes:
      - ./worker:/worker
    networks:
      - backend
    environment:
      - WORKER_TYPE=master
      - DB_HOSTNAME=mongomaster
      - NODE_NAME=master
    entrypoint: ["sh", "cleanup.sh"]
    depends_on:
      - rabbitmq
      - zookeeper

  mongomaster:
    image: mongo:latest
    container_name: mongomaster
    networks:
      - backend

networks:
  backend: